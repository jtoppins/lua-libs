-- SPDX-License-Identifier: LGPL-3.0

--- Exec - DCS AI execution functions and helpers

local enum  = require("dcsex.enum")
local check = require("dcsex.check")

local _t = {}

--- Create a table compatiable with being added to the task list
-- of a Waypoint.
-- @param id task ID
-- @param params the params table that defines the task
-- @return a compatiable task table
function _t.createTaskTbl(id, params)
	local task = {}
	task.id     = id
	if params == nil then
		task.params = {}
	else
		task.params = params
	end
	return task
end

--- Wraps a task table into another table container so that a
-- list of these wrapped tasks can be easily executed by _t.execute
-- when given an Agent controller instance.
-- @param task task table as generated by createTaskTbl
-- @param tasktype one of values defined in enum.TASKTYPE
function _t.wrapTask(task, tasktype)
	return {
		["type"] = tasktype,
		["data"] = task,
	}
end

--- Proxy calling the Controller:setCommand function call so that
-- calling Controller methods are easily genericised.
-- @param controller DCS Unit|Group Controller instance
-- @param task a DCS compliant task table definition, likely from
-- createTaskTbl
local function doCommand(controller, task)
	controller:setCommand(task)
end

--- Proxy calling the Controller:setOption function call so that
-- calling Controller methods are easily genericised.
-- @param controller DCS Unit|Group Controller instance
-- @param task a DCS compliant task table definition, likely from
-- createTaskTbl
local function doOption(controller, task)
	controller:setOption(task.id, task.params)
end

--- Proxy calling the Controller:setTask function call so that
-- calling Controller methods are easily genericised.
-- @param controller DCS Unit|Group Controller instance
-- @param task a DCS compliant task table definition, likely from
-- createTaskTbl
function _t.setTask(controller, task)
	controller:setTask(task)
end

--- Proxy calling the Controller:pushTask function call so that
-- calling Controller methods are easily genericised.
-- @param controller DCS Unit|Group Controller instance
-- @param task a DCS compliant task table definition, likely from
-- createTaskTbl
function _t.pushTask(controller, task)
	controller:pushTask(task)
end

--- Given a task list and an Agent controller apply each task
-- to the given Agent.
-- @param controller DCS Unit|Group Controller instance
-- @param tasklist a list of wrapped task entries, see wrapTask()
-- @param taskfunc function reference to either
-- ex.ai.exec.setTask or ex.ai.exec.pushTask
function _t.execute(controller, tasklist, taskfunc)
	check.table(controller)
	check.table(tasklist)
	check.func(taskfunc)

	taskfunc = taskfunc or _t.pushTask
	local switch = {
		[enum.TASKTYPE.COMMAND] = doCommand,
		[enum.TASKTYPE.OPTION]  = doOption,
		[enum.TASKTYPE.TASK]    = taskfunc,
	}
	for _, task in ipairs(tasklist) do
		local handler = switch[task.type]
		if handler ~= nil then
			handler(controller, task.data)
		else
			dcsex.Logger.getByName("DCSEX"):error(
				"no handler found for task type: "..
				tostring(task.type))
		end
	end
end

return _t
