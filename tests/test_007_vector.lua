#!/usr/bin/lua

require 'busted.runner'()
require("dcsex")

describe("validate dcsex.vector.Vec2", function()
	local vector
	local a, b, c

	before_each(function()
		vector = dcsex.vector
		a = vector.Vec2({x=5,y=5})
		b = vector.Vec2({x=3,y=3})
		c = vector.Vec2({x=3,y=3})
	end)

	test("tostring", function()
		assert.is.equal(tostring(a), "(5, 5)")
	end)
	test("inequality", function()
		assert.is_not.equal(a, b)
	end)
	test("equality", function()
		assert.is.equal(c, b)
	end)
	test("unitary", function()
		assert.is.same(-c, vector.Vec2({x=-3,y=-3}))
	end)
	test("vector addition", function()
		assert.is.equal((a + b), vector.Vec2({x=8,y=8}))
	end)
	test("vector subtraction", function()
		assert.is.equal((a - b), vector.Vec2({x=2,y=2}))
	end)
	test("scalar product", function()
		assert.is.equal((3 * a), vector.Vec2({x=15,y=15}))
	end)
	test("scalar division", function()
		assert.is.equal((3 * a) / 3, a)
	end)
	test("create/set/get", function()
		local n = vector.Vec2.new(4,7)
		assert.is.equal(n.y, 7)
		n:set(5,10)
		assert.is.equal(n.x, 5)
		assert.is.same(n:get(),{x=5,y=10})
	end)
	test("magnitude", function()
		assert.is.equal(7071, math.floor(1000 * a:magnitude()))
		assert.is.equal(7071, math.floor(1000 * a:length()))
	end)
	test("translate", function()
		local n = a:translate(4,-3)
		assert.is.same(n:get(),{x=9,y=2})
	end)
	test("rotate", function()
		local ra = a:rotate(math.pi)
		assert.is.near(ra.x, -5.0, 0.00001)
	end)
	test("distance", function()
		assert.is.near(vector.distance(a,b), 2.8284, 0.0001)
	end)
	test("dot-product", function()
		assert.is.equal(vector.dot(a,b), 30)
	end)
	test("angle", function()
		assert.is.near(vector.angle(a,b), 0, 0.000001)
	end)
	test("unitvec()", function()
		assert.is.equal(1000,
			math.ceil(vector.unitvec(a):magnitude() * 1000))
	end)
end)

describe("validate dcsex.vector.Vec3", function()
	local vector
	local a, b, c

	before_each(function()
		vector = dcsex.vector
		a = vector.Vec3.new(1.0, 0.0, 0.0)
		b = vector.Vec3.new(0.0, 1.0, 0.0)
		c = vector.Vec3.new(0.0, 1.0, 0.0)
	end)

	test("tostring", function()
		assert.is.equal(tostring(a), "(1, 0, 0)")
	end)
	test("inequality", function()
		assert.is_not.equal(a, b)
	end)
	test("equality", function()
		assert.is.equal(c, b)
	end)
	test("unitary", function()
		assert.is.same(-c, vector.Vec3.new(0.0, -1.0, 0.0))
	end)
	test("vector addition", function()
		assert.is.equal((a + b), vector.Vec3.new(1.0, 1.0, 0.0))
	end)
	test("vector subtraction", function()
		assert.is.equal((a - b), vector.Vec3.new(1.0, -1.0, 0.0))
	end)
	test("scalar product", function()
		assert.is.equal((a + b * 10), vector.Vec3.new(1.0, 10.0, 0.0))
	end)
	test("scalar division", function()
		assert.is.equal((3 * a) / 3, a)
	end)
	test("cross-product", function()
		assert.is.same(a ^ b, vector.Vec3({x=0,y=0,z=1}))
	end)
	test("create/set/get", function()
		local n = vector.Vec3.new(4,7)
		assert.is.equal(n.y, 7)
		n:set(5,10)
		assert.is.equal(n.x, 5)
		assert.is.same(n:get(),{x=5,y=10,z=0})
	end)
	test("magnitude", function()
		assert.is.equal(1000, math.floor(1000 * a:magnitude()))
		assert.is.equal(1000, math.floor(1000 * a:length()))
	end)
	test("translate", function()
		local n = a:translate(4,-3)
		assert.is.same(n:get(),{x=5,y=-3,z=0})
	end)
	test("rotY", function()
		local ra = a:rotY(math.pi/4)
		assert.is.near(ra.x, 0.707107, 0.00001)
		assert.is.near(ra.y, 0, 0.00001)
		assert.is.near(ra.z, -0.707107, 0.00001)
	end)
	test("distance", function()
		assert.is.near(vector.distance(a,b), 1.4142, 0.0001)
	end)
	test("dot-product", function()
		assert.is.equal(vector.dot(a,b), 0)
	end)
	test("unitvec()", function()
		assert.is.equal(1000,
			math.ceil(vector.unitvec(a):magnitude() * 1000))
	end)
end)
